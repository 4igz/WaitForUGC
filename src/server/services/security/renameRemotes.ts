//!optimize 2
//!native
import { Service, OnInit } from "@flamework/core";
import { HttpService } from "@rbxts/services";

@Service({})
export class RenameRemotes implements OnInit {
	onInit(): void | Promise<void> {
		task.spawn(() => {
			// Rename all remotes since we wait by the "id" attribute
			// This helps deter exploiters by making it harder to find remotes
			// This is, of course, not a foolproof method, but it's a good deterrent
			//
			// Essentially, every 1% that it's harder to exploit a game is 10% less exploiters
			// That will go the distance to ruin the game for everyone else.
			//
			// The only way to circumvent this is to use a different method to find remotes,
			// Such as firing the remote using our custom networking library, which doesn't rely on the name of the remote
			// but the id of the remote event, which is a GUID generated by the networking library. On the client though, once we have the
			// remote event, we hide the "id" attribute from the client, so they can't use it to find the remote event.
			//
			// The only way to find the remote via our networking library is to decompile the game to find the remote GUIDs in the `Functions` and `Events` tables.
			// This is much harder to do than just finding the remote event by name as it requires the exploiters to actually read the source of your game.
			// But as I said it's not foolproof and someone dedicated enough can still find the desired remotes.
			//
			// For example, an exploiter might look in the detectorController, see what GUID is being fired when you hold click on the detector, and then use that GUID
			// to fire the remote event themselves. But as I said this is just a deterrent, and there are plenty of other validations, checks, and balances in place
			// to ensure that the game is secure.
			while (true) {
				// Name them all the same so they're more difficult to distinguish.
				const newName = HttpService.GenerateGUID(false);
				for (const instance of game.GetService("ReplicatedStorage").GetDescendants()) {
					if (instance.GetAttribute("id") !== undefined) {
						instance.Name = newName;
					}
				}
				task.wait(120);
			}
		});
	}
}
